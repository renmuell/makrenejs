{"version":3,"sources":["makrene.js"],"names":["e","exports","module","define","amd","f","window","global","self","Makrene","t","n","r","s","o","u","a","require","i","Error","call","length","1","_dereq_","version","Vertex","Makrene_Vertex","data","vertex","Object","create","prototype","assign","edges","faces","neighbors","isVertex","value","Edge","Makrene_Edge","edge","vertices","isEdge","Face","Makrene_Face","face","isFace","Graph","Makrene_Graph","graph","_onChangeCallbacks","_suppressEventFires","addVertex","push","emitChange","action","newObject","addEdge","addFace","forEach","fn","onChange","event","isGraph","2","Circle","Grid","Ki","Search","Visualizer","CircleFullscreen","./base/makrene.base","./graph/makrene.graph.circle","./graph/makrene.graph.grid","./ki/makrene.ki.circle","./search/makrene.search","./visualizer/makrene.visualizer","./visualizer/makrene.visualizer.circle","./visualizer/makrene.visualizer.circleFullscreen","./visualizer/makrene.visualizer.grid","3","getIndex","position","level","numVertexOnLevel","getPositionLevel","index","Math","floor","linkWithNeighborVertex","neighbor","createEdge","filter","includes","createFace","v1","v2","id","linkEdgeWithVertexEdges","v3","min","linkFaceWithVertexFaces","calculateVertexDegree","levelDegreeOffset","Makrene_Circle","config","_numCircleLevels","_circleLength","numCircleLevels","get","isEmpty","first","undefined","center","last","arguments","v","addVertexAt","pop","object","removeVertex","removedObject","shift","removedVertex","indexZeroVertices","j","degree","k","unshift","oldLength","indexLastVertices","fill","start","end","max","pos","expandFromOutside","number","expandFromInside","collapseFromOutside","deletedLevel","collapseFromInside","clear","searchElement","vertexAt","vertexAtIndex","positionLevel","facesAt","getFacesLevelArray","indexOf","i2","levelIndex","aboveLevelVertex","indexNext","vertexLevelIndex","lastLevelVertexes","index1","index2","linkWithLevelBelowVertexes","aboveLevelVertexes","linkWithLevelAboveVertexes","removeVertexFrom","splice","vertexIndex","previousVertexIndex","removedOObject","callback","levels","item","res","map","toString","../base/makrene.base","4","Dir","Top","Right","Bottom","Left","TopLeft","TopRight","BottomRight","BottomLeft","Makrene_Grid","rows","cols","c","row","col","createVertexes","v4","5","circle","ki","init","OriginalLevel","step","a1","a2","angle","abs","angle2","l1","l2","6","DepthFirstSearch","distance","visited","BreadthFirstSearch","nextVertices","BreadthFirstSearchIterate","lastVisit","Number","MAX_VALUE","Date","now","visitedAll","next","7","base","context","offsetX","width","vertexWidth","offsetY","height","vertexHeight","cos","levelOffset","sin","./makrene.visualizer","8","edgeOfView","rect","deg","twoPI","PI","theta","region","rectAtan","atan2","tanTheta","tan","edgePoint","x","y","xFactor","yFactor","padding","9","offset","margin","10","drawText","content","color","lineHeight","measureText","fillStyle","fillRect","strokeStyle","fillText","getPosX","getPosY","lineColor","vertexColor","faceColor","lineWidth","drawFaces","drawEdges","drawVertices","drawFacesDebugText","drawEdgesDebugText","drawVertexDebugText","getVertexDebugText","random","isCallable","obj","constructor","apply","beginPath","moveTo","lineTo","stroke","centerX","centerY"],"mappings":"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","file":"makrene-min.js","sourcesContent":["!function(e){if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.Makrene=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/*global module */\n\n/**\n *  Core components of graph library.\n */\nvar Makrene = {\n\n  /**\n   *  Current Version of library\n   *  @public\n   *  @type {string}\n   */\n  version : '0.1.1',\n\n  /**\n   *  The factory Vertex(), create an new vertex object.\n   * \n   *  A vertex is a fundamental element of a graph. It represent an node which can hold data and\n   *  can be linked to create a graph.\n   *\n   *  Syntax:\n   *  var vertex = Makrene.Vertex();\n   *\n   *  @public\n   *  @param {object} data - The data of the vertex\n   *  @return {Makrene.Vertex} - New vertex object\n   */\n  Vertex: function Makrene_Vertex (data) {\n\n    var vertex = Object.create(Makrene_Vertex.prototype, {});\n\n    return Object.assign(vertex, {\n      edges      : [],\n      faces      : [],\n      neighbors  : [],\n      data       : data || {}\n    });\n  },\n\n  /**\n   *  The isVertex() method determines whether the passed value is an Vertex object.\n   *\n   *  Syntax:\n   *  Makrene.isVertex(value);\n   *  \n   *  @param {object} value - The value to be checked.\n   *  @return {bool} - true if the value is an Vertex; otherwise, false.\n   */\n  isVertex: function (value){\n    if (typeof value === 'undefined') { return false; }\n    return value instanceof Makrene.Vertex;\n  },\n\n  /**\n   *  The factory Edge(), create an new edge object.\n   * \n   *  A edge represents a connection of two vertices.\n   *\n   *  Syntax:\n   *  var edge = Makrene.Edge();\n   *\n   *  @public\n   *  @param {object} data - The data of the edge\n   *  @return {Makrene.Edge} - New edge object\n   */\n  Edge: function Makrene_Edge(data){\n\n    var edge = Object.create(Makrene_Edge.prototype, {});\n\n    return Object.assign(edge, {\n      vertices   : [],\n      faces      : [],\n      neighbors  : [],\n      data       : data || {}\n    });\n  },\n\n  /**\n   *  The isEdge() method determines whether the passed value is an Edge object.\n   *\n   *  Syntax:\n   *  Makrene.isEdge(value);\n   *  \n   *  @param {object} value - The value to be checked.\n   *  @return {bool} - true if the value is an Edge; otherwise, false.\n   */\n  isEdge: function (value){\n    if (typeof value === 'undefined') { return false; }\n    return value instanceof Makrene.Edge;\n  },\n\n  /**\n   *  The factory Face(), create an new Face object.\n   * \n   *  A face represents a area between closed connected edges. Also known as polygon.\n   *\n   *  Syntax:\n   *  var face = Makrene.Face();\n   *\n   *  @public\n   *  @param {object} data - The data of the face\n   *  @return {Makrene.Face} - New face object\n   */\n  Face: function Makrene_Face(data){\n\n    var face = Object.create(Makrene_Face.prototype, {});\n\n    return Object.assign(face, {\n      vertices   : [],\n      edges      : [],\n      neighbors  : [],\n      data       : data || {}\n    });\n  },\n\n  /**\n   *  The isFace() method determines whether the passed value is an Face object.\n   *\n   *  Syntax:\n   *  Makrene.isFace(value);\n   *  \n   *  @param {object} value - The value to be checked.\n   *  @return {bool} - true if the value is an Face; otherwise, false.\n   */\n  isFace: function (value){\n    if (typeof value === 'undefined') { return false; }\n    return value instanceof Makrene.Face;\n  },\n\n  /**\n   *  The factory Graph(), create an new Graph object.\n   * \n   *  A graph is a set of connected vertices, edges and faces.\n   *\n   *  Syntax:\n   *  var face = Makrene.Graph();\n   *\n   *  @public\n   *  @param {object} data - The data of the graph.\n   *  @param {object} graph - Use this for inheritance.\n   *  @return {Makrene.Graph} - New graph object.\n   */\n  Graph: function Makrene_Graph(data, graph){\n\n    // new graph instance\n    if (typeof graph === 'undefined') {\n      graph = Object.create(Makrene_Graph.prototype, {});\n    }\n    \n    return Object.assign(graph, {\n\n      /**\n       *  List of callback function for the onChange() Method.\n       *\n       *  @private\n       *  @type {array<function>}\n       */\n      _onChangeCallbacks: [],\n \n      /**\n       *  If true no event should be fired.\n       * \n       *  @private\n       *  @type {bool}\n       */\n      _suppressEventFires: false,\n\n      /**\n       *  List of vertices.\n       *\n       *  @public\n       *  @type {array<Makrene.Vertex>}\n       */\n      vertices   : [],\n \n      /**\n       *  List of edges.\n       *\n       *  @public\n       *  @type {array<Makrene.Edge>}\n       */\n      edges      : [],\n \n      /**\n       *  List of faces.\n       *\n       *  @public\n       *  @type {array<Makrene.Face>}\n       */\n      faces      : [],\n \n      /**\n       *  List of neighbors.\n       *\n       *  @public\n       *  @type {array<Makrene.Graph>}\n       */\n      neighbors   : [],\n \n      /**\n       *  Data object.\n       *\n       *  @public\n       *  @type {object}\n       */\n      data       : data || {},\n\n      /**\n       *  Add vertex to graph.\n       *\n       *  @public\n       *  @fires Change-Event\n       *  @param {Makrene.Vertex} vertex - object to add\n       *  @return {Makrene.Graph}        - this graph instance\n       */\n      addVertex : function(vertex) { \n        graph.vertices.push(vertex); \n\n        graph.emitChange({\n          action: \"addVertex\",\n          graph: graph,\n          newObject: vertex\n        }); \n        \n        return graph; \n      },\n\n      /**\n       *  Add edge to graph.\n       *\n       *  @public\n       *  @fires Change-Event\n       *  @param {Makrene.Edge} edge - object to add\n       *  @return {Makrene.Graph}    - this graph instance\n       */\n      addEdge   : function(edge) { \n        graph.edges.push(edge);    \n      \n        graph.emitChange({\n          action: \"addEdge\",\n          graph: graph,\n          newObject: edge\n        }); \n\n        return graph; \n      },\n\n      /**\n       *  Add face to graph.\n       *\n       *  @public\n       *  @fires Change-Event\n       *  @param {Makrene.Face} face - object to add\n       *  @return {Makrene.Graph}    - this graph instance\n       */\n      addFace   : function(face)   { \n        graph.faces.push(face);    \n\n        graph.emitChange({\n          action: \"addFace\",\n          graph: graph,\n          newObject: face\n        }); \n\n        return graph;\n      },\n\n      /**\n       *  The forEach() method executes a provided function once for each vertex of the graph.\n       *\n       *  @public\n       *  @param {function} fn - callback function for each vertex\n       *  @return {undefined}\n       */\n      forEach   : function(fn)     { graph.vertices.forEach(fn); },\n\n      /**\n       *  The onchange event occurs when the value of an graph component has been changed.\n       *\n       *  @public\n       *  @param {function} fn - callback when an change is been emitted. \n       *  @return {undefined}\n       */\n      onChange  : function(fn)     { graph._onChangeCallbacks.push(fn); },\n\n      /**\n       *  Triggers a change event, which will call all listeners.\n       *\n       *  @public\n       *  @param {object} event - the event data which will be sent\n       *  @return {undefined}\n       */\n      emitChange: function(event)  { \n        if (!graph._suppressEventFires) {\n          graph._onChangeCallbacks.forEach(function(fn){ fn(event) });\n        } \n      }\n    });\n  },\n\n  /**\n   *  The isGraph() method determines whether the passed value is an Graph object.\n   *\n   *  Syntax:\n   *  Makrene.isGraph(value);\n   *  \n   *  @param {object} value - The value to be checked.\n   *  @return {bool} - true if the value is an Graph; otherwise, false.\n   */\n  isGraph: function (value){\n    if (typeof value === 'undefined') { return false; }\n    return value instanceof Makrene.Graph;\n  }\n\n};\n\nmodule.exports = Makrene;\n\n},{}],2:[function(_dereq_,module,exports){\n/*global require, module */\n\n/**\n *  Combines all Makrene components into on usable namespace object.\n */\nmodule.exports = Object.assign(_dereq_('./base/makrene.base'), {\n\n  /**\n   *  @typedef Makrene.Circle\n   */\n  Circle : _dereq_('./graph/makrene.graph.circle'),\n\n  /**\n   *  @typedef Makrene.Grid\n   */\n  Grid   : _dereq_('./graph/makrene.graph.grid'),\n\n  /**\n   *  @namespace\n   */\n  Ki     : { \n\n    /**\n     *  @typedef Makrene.Ki.Circle\n     */\n    Circle : _dereq_('./ki/makrene.ki.circle') \n  },\n\n  /**\n   *  @typedef Makrene.Search\n   */\n  Search : _dereq_('./search/makrene.search'),\n\n  /**\n   *  @typedef Makrene.Visualizer\n   */\n  Visualizer : Object.assign(_dereq_('./visualizer/makrene.visualizer'), {\n\n    /**\n     *  @typedef Makrene.Visualizer.Grid\n     */\n    Grid   : _dereq_('./visualizer/makrene.visualizer.grid'),\n\n    /**\n     *  @typedef Makrene.Visualizer.Circle\n     */\n    Circle : _dereq_('./visualizer/makrene.visualizer.circle'),\n  \n    /**\n     *  @typedef Makrene.Visualizer.CircleFullscreen\n     */\n    CircleFullscreen : _dereq_('./visualizer/makrene.visualizer.circleFullscreen')\n  })\n  \n});\n\n},{\"./base/makrene.base\":1,\"./graph/makrene.graph.circle\":3,\"./graph/makrene.graph.grid\":4,\"./ki/makrene.ki.circle\":5,\"./search/makrene.search\":6,\"./visualizer/makrene.visualizer\":10,\"./visualizer/makrene.visualizer.circle\":7,\"./visualizer/makrene.visualizer.circleFullscreen\":8,\"./visualizer/makrene.visualizer.grid\":9}],3:[function(_dereq_,module,exports){\n(function() {\n\n/*global require, module */\n\nvar Makrene = _dereq_('../base/makrene.base')\n\n/**\n *  Multi linked circle mesh.\n *\n *     -----B-----\n *    /    / \\    \\\n *   A----5---6----C\n *   | \\ / \\ / \\ / |\n *   |  4---1---7  |\n *   | / \\ / \\ / \\ |  Circle with numVertexOnLevel = 6\n *   9----3---2----D         and  length = 13\n *    \\    \\ /    /\n *     -----8-----\n *\n *  The circle contains multiple levels/rings, each with a \n *  max number of vertices. The center contains one vertex, connected\n *  with each of the first level/ring. Each level vertex is connected\n *  with their visual neighbor and two vertices of the lower and \n *  higher level/ring (because each level/ring is offset by half \n *  the distance of each vertex, which puts every vertex in the \n *  middle of the vertices below and above). \n *\n *  Behaves like a sequence. The first element is the center of \n *  the circle and it grows outside, by which the last element \n *  is the vertex with the highest degree/angle on the outer \n *  level/ring.\n *  \n *  Syntax:\n *  \n *  var circle = Makrene.Circle();\n *\n *  @public\n *  @implements {Makrene.Graph}\n *  @param {object} config - the Settings\n *  @param {number} config.numVertexOnLevel - @see graph.numVertexOnLevel\n *  @returns {Makrene.Circle} - The circle instance.\n */\nmodule.exports = function Makrene_Circle(config) {\n\n  /***\n   *       _____             __ _       \n   *      / ____|           / _(_)      \n   *     | |     ___  _ __ | |_ _  __ _ \n   *     | |    / _ \\| '_ \\|  _| |/ _` |\n   *     | |___| (_) | | | | | | | (_| |\n   *      \\_____\\___/|_| |_|_| |_|\\__, |\n   *                               __/ |\n   *                              |___/ \n   */\n\n  config = Object.assign({\n\n   /**\n    *  default setting for numVertexOnLevel\n    *  @see graph.numVertexOnLevel\n    */\n    numVertexOnLevel: 8\n\n  }, config);\n\n  /***\n   *      ______ _      _     _     \n   *     |  ____(_)    | |   | |    \n   *     | |__   _  ___| | __| |___ \n   *     |  __| | |/ _ \\ |/ _` / __|\n   *     | |    | |  __/ | (_| \\__ \\\n   *     |_|    |_|\\___|_|\\__,_|___/\n   *                                \n   *                                \n   */\n\n  /**\n   *  @private\n   *  @see graph.numCircleLevels\n   */\n  var _numCircleLevels = 0;\n   \n  /**\n   *  @private\n   *  @see graph.length\n   */\n  var _circleLength = 0;\n\n  /***\n   *      _____                           _   _           \n   *     |  __ \\                         | | (_)          \n   *     | |__) | __ ___  _ __   ___ _ __| |_ _  ___  ___ \n   *     |  ___/ '__/ _ \\| '_ \\ / _ \\ '__| __| |/ _ \\/ __|\n   *     | |   | | | (_) | |_) |  __/ |  | |_| |  __/\\__ \\\n   *     |_|   |_|  \\___/| .__/ \\___|_|   \\__|_|\\___||___/\n   *                     | |                              \n   *                     |_|                              \n   */\n\n  /**\n   *  Circle Instance.\n   * \n   *  @typedef Makrene.Circle\n   *  @type {Object}\n   */\n  var graph = Object.create(Makrene_Circle.prototype, {\n\n    /**\n     *  Gets the number of max vertex count per level/ring.\n     *\n     *  @public\n     *  @default 8\n     *  @type {number}\n     */\n    numVertexOnLevel: {\n      value: config.numVertexOnLevel\n    },\n\n    /**\n     *  Gets the number of circle levels/rings.\n     *\n     *  @public\n     *  @type {number}\n     */\n    numCircleLevels: {\n\n      /**\n       *  Getter for circle.numCircleLevels\n       */\n      get: function(){\n        return _numCircleLevels;\n      }\n    },\n\n    /**\n     *  The number of vertices in the circle/graph.\n     *\n     *  @public\n     *  @type {number}\n     */\n    length  : {\n\n      /**\n       *  Getter for circle.length\n       */\n      get: function(){\n        return _circleLength;\n      }\n    },\n\n    /**\n     *  Is circle empty.\n     *\n     *  @public\n     *  @type {boolean}\n     */\n    isEmpty : {\n\n      /**\n       *  Getter for circle.isEmpty\n       */\n      get: function(){\n        return graph.vertices.length === 0;\n      }\n    },\n\n    /**\n     *  First Element of circle/graph, which is the center of the circle.\n     *\n     *  @public\n     *  @type {Makrene.Vertex}\n     */\n    first: {\n\n      /**\n       *  Getter for circle.first\n       */\n      get: function(){\n        return graph.vertices[0] ? graph.vertices[0][0] : undefined;\n      }\n    },\n\n    /**\n     *  Visual center element of circle/graph. Same as first().\n     *\n     *  @public\n     *  @alias graph.first\n     *  @type {Makrene.Vertex}\n     */\n    center: {\n\n      /**\n       *  Getter for circle.center\n       */\n      get: function(){\n        return graph.first;\n      }\n    },\n\n    /**\n     *  Last element of circle/graph, which is the vertex with the \n     *  highest degree/angle on the outer level/ring.\n     *\n     *  @public\n     *  @type {Makrene.Vertex}\n     */\n    last: {\n\n      /**\n       *  Getter for circle.last\n       */\n      get: function(){\n        return graph.isEmpty \n          ? undefined \n          : graph.length === 1 \n            ? graph.center \n            : graph.vertices[_numCircleLevels][graph.vertices[_numCircleLevels].length - 1];\n      }\n    }\n  });\n\n  /***\n   *      __  __      _   _               _     \n   *     |  \\/  |    | | | |             | |    \n   *     | \\  / | ___| |_| |__   ___   __| |___ \n   *     | |\\/| |/ _ \\ __| '_ \\ / _ \\ / _` / __|\n   *     | |  | |  __/ |_| | | | (_) | (_| \\__ \\\n   *     |_|  |_|\\___|\\__|_| |_|\\___/ \\__,_|___/\n   *                                                                                     \n   */\n  return Object.assign(graph, Makrene.Graph({}, graph), {\n\n    /**\n     *  The push() method adds one or more elements to the end of \n     *  an Circle and returns the new length of the Circle.\n     *\n     *  Syntax:\n     *  let newCircleLength = circle.push(vertex1[, ...[, vertexN]])\n     *\n     *  @public\n     *  @fires Change-Event\n     *  @param {...Makrene.Vertex|object} v - The elements to add to the end of the Circle.\n     *                                        New vertex or data for new vertex.\n     *  @return {number} - Length after push of vertex\n     */\n    push: function () {\n\n      [].forEach.call(arguments, function (v) {\n\n        graph._suppressEventFires = true;\n\n        if (typeof v === 'undefined' || !(v instanceof Makrene.Vertex)) {\n          v = Makrene.Vertex(v || {});\n        }\n\n        if (graph.isEmpty) {\n          graph.addVertexAt(0, 0, v);  \n        } else if (_numCircleLevels == 0 || graph.vertices[_numCircleLevels].length === graph.numVertexOnLevel) {\n          graph.addVertexAt(_numCircleLevels + 1, 0, v);  \n        } else {\n          graph.addVertexAt(_numCircleLevels, graph.vertices[_numCircleLevels].length, v);  \n        }\n\n        graph._suppressEventFires = false;\n\n        graph.emitChange({\n          action: \"push\",\n          graph: graph,\n          newObject: v\n        }); \n\n      });\n\n      return graph.length;\n    },\n  \n    /**\n     *  The pop() method removes the last element from an Circle and returns that element. \n     *  This method changes the length of the Circle.\n     *\n     *  Syntax:\n     *  var vertex = circle.pop()\n     *\n     *  @public\n     *  @fires Change-Event\n     *  @return {Makrene.Vertex|undefined} - The removed element from the circle; \n     *                                       undefined if the circle is empty.\n     */\n    pop: function(){\n\n      graph._suppressEventFires = true;\n\n      var object = graph.removeVertex(graph.last);\n\n      graph._suppressEventFires = false;\n\n      graph.emitChange({\n        action: \"pop\",\n        graph: graph,\n        removedObject: object\n      }); \n\n      return object;\n    },\n\n    /**\n     *  The shift() method removes the first element from an Circle and returns that removed element. \n     *  This method changes the length of the Circle.\n     *\n     *  Syntax:\n     *  var vertex = circle.shift()\n     *\n     *  @public\n     *  @fires Change-Event\n     *  @return {Makrene.Vertex|undefined} - The removed element from the circle; \n     *                                       undefined if the circle is empty.\n     *\n     *  @remarks Algorithm-idea: fast rotate to center\n     *           - remove middle\n     *           - remove every first element of each level, shift rest one position to front\n     *           - add removed element one level lower on freed last position\n     */\n    shift: function(){\n\n      graph._suppressEventFires = true;\n\n      var removedVertex;\n\n      if (graph.isEmpty) { return; }\n      else if (graph.length === 1) {\n\n        removedVertex = graph.last;\n        graph.removeVertex(graph.last);\n\n      } else {\n\n        // remove all level index 0\n        var indexZeroVertices = [];\n        for (var i = graph.vertices.length - 1; i >= 0; i--) {\n          indexZeroVertices[i] = graph.vertices[i][0];\n          graph.removeVertex(graph.vertices[i][0]);\n        }\n\n        // shift all levels --> undefined at last max level index\n        for (var j = graph.vertices.length - 1; j >= 0; j--) {\n          graph.vertices[j].shift();\n\n          graph.vertices[j].forEach(function(v, index){\n            if (v){\n              v.data.degree = calculateVertexDegree(graph, j, index);\n              v.data.level  = j;\n              v.id = v.data.level + '_' + v.data.degree;\n            }\n          });\n        }\n        _circleLength--;\n\n        // add all index 0 at the end of level below\n        graph.addVertexAt(0, 0, indexZeroVertices[1]);\n        for (var k = indexZeroVertices.length - 1; k >= 2; k--) {\n          graph.addVertexAt(k - 1, graph.numVertexOnLevel - 1, indexZeroVertices[k]);\n        }\n\n        removedVertex = indexZeroVertices[0];\n      }\n      \n      graph._suppressEventFires = false;\n\n      graph.emitChange({\n        action: \"shift\",\n        graph: graph,\n        removedObject:removedVertex\n      }); \n\n      return removedVertex;\n    },\n    \n    /**\n     *  The unshift() method adds one or more elements to the beginning of \n     *  an Circle and returns the new length of the Circle.\n     *\n     *  Syntax:\n     *  let newCircleLength = circle.unshift(vertex1[, ...[, vertexN]])\n     *\n     *  @public\n     *  @fires Change-Event\n     *  @param {...Makrene.Vertex|object} v - The elements to add to the beginning of the Circle.\n     *                                        New vertex or data for new vertex.\n     *  @return {number} - The new length property of the circle upon which the method was called.\n     */\n    unshift: function(){\n\n      [].forEach.call(arguments, function (v) {\n\n        graph._suppressEventFires = true;\n\n        if (typeof v === 'undefined' || !(v instanceof Makrene.Vertex)) {\n          v = Makrene.Vertex(v || {});\n        }\n\n        if (graph.isEmpty) { \n          graph.addVertexAt(0, 0, v);  \n        } else {\n          var oldLength = graph.length;\n          // remove every last index\n          var indexLastVertices = [graph.center];\n          graph.removeVertex(graph.center);\n          for (var i = graph.vertices.length - 1; i >= 0; i--) {\n            if (graph.vertices[i][graph.numVertexOnLevel-1]){\n              indexLastVertices[i] = graph.vertices[i][graph.numVertexOnLevel-1];\n              graph.removeVertex(graph.vertices[i][graph.numVertexOnLevel-1]);\n            }\n          }\n\n          // unshift every level -> insert undefined at 0\n          for (var j = graph.vertices.length - 1; j >= 0; j--) {\n            graph.vertices[j].unshift(undefined);\n\n            graph.vertices[j].forEach(function(v, index){\n              if (v){\n                v.data.degree = calculateVertexDegree(graph, j, index);\n                v.data.level  = j;\n                v.id = v.data.level + '_' + v.data.degree;\n              }\n            });\n          }\n          _circleLength = oldLength + 1;\n\n          // add all last index at beginning of level above\n          for (var k = indexLastVertices.length - 1; k >= 0; k--) {\n            graph.addVertexAt(k + 1, 0, indexLastVertices[k]);\n          }\n\n          // add vertex at 0,0\n          graph.addVertexAt(0, 0, v);\n        }\n\n        graph._suppressEventFires = false;\n\n        graph.emitChange({\n          action: \"unshift\",\n          graph: graph,\n          newObject: v\n        });\n\n      });\n\n      return graph.length;\n    },\n\n    /**\n     *  The fill() method fills all the elements of an circle from a start index to an end index with a static value. \n     *  The end index is not included.\n     *\n     *  Syntax:\n     *  circle.fill(value[, start[, end]])\n     *\n     *  @public\n     *  @fires Change-Event\n     *  @param {Makrene.Vertex|object} value - Value to fill an circle.\n     *  @param {number} start - Start index, defaults to 0.\n     *  @param {number} end - End index, defaults to this.length.\n     *  @return {Makrene.Circle} - The modified circle. \n     */\n    fill: function (value, start, end) {\n\n      graph._suppressEventFires = true;\n\n      if (typeof value === 'undefined' || !(value instanceof Makrene.Vertex)) {\n        value = Makrene.Vertex(value || {});\n      }\n\n      start = start || 0;\n      start = start < 0 ?\n        Math.max(graph.length + start, 0) :\n        Math.min(start, graph.length);\n\n      end = end || graph.length;\n\n      end = end < 0 ?\n        Math.max(graph.length + end, 0) :\n        Math.min(end, graph.length);\n\n      while (start < end) {\n        var pos = getPositionLevel(graph, start);\n        graph.addVertexAt(pos.level, pos.position, value);\n        start++;\n      }\n\n      graph._suppressEventFires = false;\n\n      graph.emitChange({\n        action: \"fill\",\n        graph: graph\n      });\n\n      return graph;\n    },\n\n    /**\n     *  The expandFromOutside() method pushes new empty vertices to the end\n     *  of the Circle.\n     * \n     *  Syntax:\n     *  circle.expandFromOutside(number)\n     * \n     *  @public\n     *  @fires Change-Event for each vertex\n     *  @param {number} number - How many vertices to push to the end.\n     *  @return {number} - The new length property of the circle upon which the method was called.\n     */\n    expandFromOutside: function(number){\n      number = number || graph.numVertexOnLevel;\n\n      for(;number>0;number--){ \n        graph.push(Makrene.Vertex());\n      }\n\n      return graph.length;\n    },\n\n    /**\n     *  The expandFromInside() method unshifts new empty vertices to the beginning\n     *  of the Circle.\n     * \n     *  Syntax:\n     *  circle.expandFromInside(number)\n     * \n     *  @public\n     *  @fires Change-Event for each vertex\n     *  @param {number} number - How many vertices to unshift to the beginning.\n     *  @return {number} - The new length property of the circle upon which the method was called.\n     */\n    expandFromInside: function(number){\n      number = number || graph.numVertexOnLevel;\n\n      for(;number>0;number--){ \n        graph.unshift(Makrene.Vertex());\n      }\n\n      return graph.length;\n    },\n\n    /**\n     *  The collapseFromOutside() method pops vertices from the end of the Circle.\n     * \n     *  Syntax:\n     *  circle.collapseFromOutside(number)\n     * \n     *  @public\n     *  @fires Change-Event for each vertex\n     *  @param {number} number - How many vertices to pop from the end.\n     *  @return {number} - The new length property of the circle upon which the method was called.\n     */\n    collapseFromOutside: function(number){\n      var deletedLevel = [];\n\n      number = number || graph.numVertexOnLevel;\n\n      for(;number>0;number--){ \n        deletedLevel.push(graph.pop());\n      }\n\n      return deletedLevel;\n    },\n\n    /**\n     *  The collapseFromInside() method shift vertices from the beginning of the Circle.\n     * \n     *  Syntax:\n     *  circle.collapseFromInside(number)\n     * \n     *  @public\n     *  @fires Change-Event for each vertex\n     *  @param {number} number - How many vertices to shift from the beginning.\n     *  @return {number} - The new length property of the circle upon which the method was called.\n     */\n    collapseFromInside: function(number){\n      var deletedLevel = [];\n\n      number = number || graph.numVertexOnLevel;\n\n      for(;number>0;number--){ \n        deletedLevel.push(graph.shift());\n      }\n\n      return deletedLevel;\n    },\n\n    /**\n     *  Clears all vertices form the circle. And resets all data.\n     * \n     *  Syntax:\n     *  circle.clear()\n     * \n     *  @public\n     *  @fires Change-Event\n     *  @return {undefined} \n     */\n    clear: function(){\n\n      _numCircleLevels  = 0;\n      _circleLength     = 0;\n      graph.faces       = [];\n      graph.edges       = [];\n      graph.vertices    = [];\n      graph.neighbors   = [];\n      graph.data        = {};\n\n      graph.emitChange({\n        action: \"clear\",\n        graph: graph\n      });\n    },\n\n    /**\n     *  The includes() method determines whether an circle includes a certain\n     *  element, returning true or false as appropriate.\n     * \n     *  Syntax:\n     *  circle.includes(searchElement)\n     * \n     *  @public\n     *  @param {Makrene.Vertex} searchElement - The element to search for.\n     *  @return {boolean} - A Boolean which is true if the value searchElement \n     *                      is found within the circle.\n     */\n    includes: function(searchElement){\n      return graph.filter(function(v){ return v === searchElement; }).length > 0;\n    },\n\n    /**\n     *  Gets vertex at a certain level and position on that level of a circle.\n     *  \n     *  Syntax:\n     *  circle.vertexAt(level, position)\n     * \n     *  @public\n     *  @param {number} level - The level of the circle.\n     *  @param {number} position - The position on the level.\n     *  @return {Makrene.Vertex|undefined} - The vertex on the position.\n     */\n    vertexAt: function(level, position){\n      return graph.vertices[level] ? graph.vertices[level][position] : undefined;\n    },\n\n    /**\n     *  Returns the vertex at a specified index in a circle.\n     * \n     *  @public\n     *  @param {number} index - The zero-based index of the vertex to retrieve.\n     *  @param {Makrene.Vertex|undefined} - The element at the specified position in the circle.\n     *  @return {Makrene.Vertex|undefined} - The vertex on the position.\n     */\n    vertexAtIndex: function(index){\n      var positionLevel = getPositionLevel(graph, index)\n      return graph.vertexAt(positionLevel.level, positionLevel.position);\n    },\n\n    /**\n     *  Get all Faces of a circle level.\n     * \n     *  Syntax:\n     *  circle.faceAt(level)\n     * \n     *  @public\n     *  @param {number} level - The zero-based level of the circle.\n     *  @return {array<Makrene.Face>} - A list of all Faces for one level.\n     */\n    facesAt: function(level){\n      return graph.faces.filter(function(f){ return f.data.level == level; });\n    },\n\n    /**\n     *  Get all Faces grouped by level.\n     *  \n     *  Syntax:\n     *  circle.getFacesLevelArray()\n     * \n     *  @public\n     *  @return {array<array<Makrene.Face>>} - Grouped list of all Faces.\n     */\n    getFacesLevelArray: function(){\n      var r = [];\n\n      graph.faces.forEach(function(f){ \n        \n        if (typeof r[f.data.level] === 'undefined') {\n          r[f.data.level] = []; \n        }\n\n        r[f.data.level].push(f); \n      });\n\n      return r;\n    },\n\n    /**\n     *  The indexOf() method returns the first index at which a given \n     *  vertex can be found in the circle, or -1 if it is not present.\n     * \n     *  Syntax:\n     *  circle.indexOf(vertex)\n     *  \n     *  @public\n     *  @param {Makrene.Vertex} vertex - Vertex to locate in the circle.\n     *  @return {number} - The first index of the vertex in the circle; -1 if not found.\n     */\n    indexOf: function(vertex){\n      var index = 0;\n      \n      for (var i = graph.vertices.length - 1, i2 = 0; i >= 0; i--, i2++) {\n        var levelIndex = graph.vertices[i2].indexOf(vertex);\n        if (levelIndex >= 0){\n          return index + levelIndex;\n        } else {\n          index += graph.vertices[i2].length;\n        }\n      }\n\n      return -1;\n    },\n    \n    /**\n     *  Adds new Vertex on level and position on that level in the circle.\n     * \n     *  Syntax:\n     *  circle.addVertexAt(level, position, vertex)\n     * \n     *  @public\n     *  @fires Change-Event\n     *  @param {number} level - The level of the circle to add to.\n     *  @param {number} position - The position on the level.\n     *  @param {number} vertex - The vertex to add.\n     *  @return {number} - Length after push of vertex.\n     */\n    addVertexAt: function(level, position, vertex){\n\n      if (graph.numVertexOnLevel == 0){ return; }\n      if (graph.numVertexOnLevel < position){ return; }\n      if (graph.level == 0 && position !== 0) { return; }\n\n      if (_numCircleLevels < level) {\n        _numCircleLevels = level;\n      }\n\n      graph.vertices[level] = graph.vertices[level] || [];\n\n      if (typeof vertex === 'undefined') {\n     \n        graph.vertices[level][position] = undefined;\n     \n      } else {\n\n        if (!(vertex instanceof Makrene.Vertex)) {\n          vertex = Makrene.Vertex(vertex || {});\n        }\n\n        vertex.data.degree = calculateVertexDegree(graph, level, position);\n        vertex.data.level  = level;\n        vertex.id = vertex.data.level + '_' + vertex.data.degree;\n        graph.vertices[level][position] = vertex;\n\n        //Link center with everyone above\n        if (level === 0) {\n          if (graph.vertices[1]) {\n            linkCenterWithLevelAboveVertexes(graph);\n          }\n        } else {\n          \n          //linking with level below\n          linkWithLevelBelowVertexes(graph, level, position);\n\n          //linking with level above\n          linkWithLevelAboveVertexes(graph, level, position);\n\n          //link with previous neighbor\n          linkWithNeighborVertex(\n            graph, \n            vertex, \n            graph.vertices[level][(position - 1 + graph.numVertexOnLevel) % graph.numVertexOnLevel]);\n\n          //link with next neighbor \n          linkWithNeighborVertex(\n            graph, \n            vertex, \n            graph.vertices[level][(position + 1 + graph.numVertexOnLevel) % graph.numVertexOnLevel]); \n        }\n      }\n      \n      var index = getIndex(graph, position, level);\n      if (index > graph.length - 1) {\n        _circleLength = index + 1;  \n      }\n\n      graph.emitChange({\n        action: \"addVertex\",\n        graph: graph,\n        newObject: vertex\n      }); \n\n      return graph.length;\n    },\n\n    /**\n     *  Removes a Vertex from a circle on level and position on that level.\n     * \n     *  Syntax:\n     *  circle.removeVertexFrom(level, position)\n     *  \n     *  @public\n     *  @fires Change-Event\n     *  @param {number} level - The level of the circle to add to.\n     *  @param {number} position - The position on the level.\n     *  @return {Makrene.Vertex} - The removed vertex from the circle.\n     */\n    removeVertexFrom: function(level, position){\n      return graph.removeVertex(graph.vertexAt(level, position));\n    },\n\n    /**\n     *  Removes a vertex from a circle.\n     * \n     *  Syntax:\n     *  circle.removeVertex(vertex)\n     *  \n     *  @public\n     *  @fires Change-Event\n     *  @param {Makrene.vertex} vertex - The vertex to remove.\n     *  @return {Makrene.vertex} - The removed vertex from the circle.\n     */\n    removeVertex: function(vertex) {\n      if (vertex){\n\n        // remove neighbors\n        vertex.neighbors.forEach(function(neighbor){\n          neighbor.neighbors.splice(neighbor.neighbors.indexOf(vertex), 1);\n        });\n        \n        // remove edges\n        vertex.edges.forEach(function(edge){\n          edge.neighbors.forEach(function(neighbor){\n            neighbor.neighbors.splice(neighbor.neighbors.indexOf(edge), 1);\n          });\n\n          edge.vertices.forEach(function(v){\n            if (v != vertex) {\n              v.edges.splice(v.edges.indexOf(edge), 1);\n            }\n          });\n\n          edge.faces.forEach(function(face){\n            face.edges.splice(face.edges.indexOf(edge), 1);\n          });\n\n          \n          graph.edges.splice(graph.edges.indexOf(edge), 1);\n        });\n\n        // remove faces\n        vertex.faces.forEach(function(face){\n          face.neighbors.forEach(function(neighbor){\n            neighbor.neighbors.splice(neighbor.neighbors.indexOf(face), 1);\n          });\n\n          face.vertices.forEach(function(v){\n            if (v != vertex) {\n              v.faces.splice(v.faces.indexOf(face), 1);\n            }\n          });\n\n          face.edges.forEach(function(edge){\n            edge.faces.splice(edge.faces.indexOf(face), 1);\n          });\n\n          graph.faces.splice(graph.faces.indexOf(face), 1);\n        });\n\n        var vertexIndex = 0;\n\n        // remove vertex\n        graph.vertices.forEach(function(level, index){\n          if (level.includes(vertex)){\n            vertexIndex = getIndex(graph, level.indexOf(vertex), index);\n            if (level.indexOf(vertex) == level.length - 1){\n              level.length = level.length - 1;\n            } else {\n              delete level[level.indexOf(vertex)];\n            }\n            \n            if (_numCircleLevels == index && level.length === 0) {\n              if (graph.numCircleLevels === 0) {\n                graph.vertices = [];\n              } else {\n                graph.vertices.splice(graph.vertices.indexOf(level), 1);\n              }\n            }\n          } \n        });\n\n        vertex.edges = [];\n        vertex.faces = [];\n        vertex.neighbors = [];\n\n        // if last vertex update circle length and umCircleLevels\n        if (vertexIndex == _circleLength - 1) {\n\n          var previousVertexIndex = vertexIndex - 1;\n          \n          while (previousVertexIndex >= 0 && typeof graph.vertexAtIndex(previousVertexIndex) === 'undefined') {\n            previousVertexIndex--;\n          }\n\n          if (previousVertexIndex < 0) {\n            _circleLength = 0;\n            _numCircleLevels = 0;\n          } else {\n            _circleLength = previousVertexIndex + 1;\n            _numCircleLevels = getPositionLevel(graph, previousVertexIndex).level;\n          }\n        }\n        \n        graph.emitChange({\n          action: \"removeVertex\",\n          graph: graph,\n          removedOObject: vertex\n        }); \n\n        return vertex;\n      }\n    },\n\n    /**\n     *  The forEach() method executes a provided function once for each circle vertex.\n     *\n     *  Syntax:\n     *  circle.forEach(function callback(currentVertex[, index[, graph]]) {\n     *  }[, thisArg]);\n     *\n     *  @public\n     *  @param {function} callback - Function to execute for each element, taking three arguments:\n     *                          currentVertex  Optional\n     *                              The current element being processed in the circle.\n     *                          index   Optional\n     *                              The index of the current element being processed in the circle.\n     *                          circle   Optional\n     *                              The circle filter was called upon.\n     *\n     *  @return {undefined}\n     */\n    forEach: function(callback){\n      graph.vertices.forEach(function(levels, level){ \n        levels.forEach(function(item, position){\n          callback(item, getIndex(graph, position, level), graph);\n        }); \n      });\n    },\n\n    /**\n     *  The filter() method creates a new array with all elements \n     *  that pass the test implemented by the provided function.\n     *\n     *  Syntax:\n     *  var newArray = circle.filter(callback(vertex[, index[, graph]])[, thisArg])\n     *\n     *  @public\n     *  @param {function} callback - Function is a predicate, to test each element of the circle. \n     *                               Return true to keep the element, false otherwise. It accepts three arguments:\n     *                          vertex  Optional\n     *                              The current element being processed in the circle.\n     *                          index   Optional\n     *                              The index of the current element being processed in the circle.\n     *                          graph   Optional\n     *                              The circle filter was called upon.\n     *\n     *  @return {array} - A new array with the elements that pass the test. If no elements pass the test, an empty array will be returned.\n     */\n    filter: function(callback){\n      var res = [];\n\n      graph.forEach(function(vertex, index){\n        if (callback(vertex, index, graph)){\n          res.push(vertex);\n        }\n      });\n\n      return res;\n    },\n\n    /**\n     *  The map() method creates a new array with the results of calling a provided function on \n     *  every element in the calling circle.\n     *\n     *  Syntax:\n     *  var new_array = arr.map(function callback(currentVertex[, index[, graph]]) {\n     *    // Return element for new_array\n     *  }[, thisArg])\n     *\n     *  @public\n     *  @param {function} callback - Function that produces an element of the new Array, taking three arguments:\n     *                          currentVertex  Optional\n     *                              The value of the current element being processed in the circle.\n     *                          index   Optional\n     *                              The index of the current element being processed in the circle.\n     *                          graph   Optional\n     *                              The circle that forEach() is being applied to.\n     *\n     *  @return {array} - A new array with each element being the result of the callback function.\n     */\n    map: function(callback){\n      var res = [];\n\n      graph.forEach(function(vertex, index){\n        res.push(callback(vertex, index, graph));\n      });\n\n      return res;\n    },\n\n    /**\n     *  The toString() method returns a string representing the circle.\n     *\n     *  Syntax:\n     *  circle.toString()\n     *\n     *  @public\n     *  @return {string} - A string representing the circle.\n     */\n    toString: function () {\n      return 'Makrene.Circle' +\n             '\\n\\tNumVertexOnLevel: ' + graph.numVertexOnLevel +\n             '\\n\\tNumCircleLevels: ' + graph.numCircleLevels +\n             '\\n\\tLength: ' + graph.length +\n             '\\n\\tEdges: ' + graph.edges.length +\n             '\\n\\tFaces: ' + graph.faces.length;\n    }\n  });\n};\n\n/***\n *      _____      _            _            \n *     |  __ \\    (_)          | |           \n *     | |__) | __ ___   ____ _| |_ ___  ___ \n *     |  ___/ '__| \\ \\ / / _` | __/ _ \\/ __|\n *     | |   | |  | |\\ V / (_| | ||  __/\\__ \\\n *     |_|   |_|  |_| \\_/ \\__,_|\\__\\___||___/\n *                                                                                    \n */\n\n/**\n *  Returns index of vertex for level and position in circle.\n * \n *  Syntax:\n *  getIndex(graph, position, level)\n * \n *  @private\n *  @param {Makrene.Circle} graph - The graph instance.\n *  @param {number} position - The position on the level.\n *  @param {number} level - The level of the circle.\n *  @return {number} - The index.\n */\nfunction getIndex(graph, position, level){\n  return (level === 0) ? 0 : (((level - 1) * graph.numVertexOnLevel) + position) + 1;\n}\n\n/**\n *  Returns level and position info for the index.\n * \n *  Syntax:\n *  getPositionLevel(graph, index)\n * \n *  @private\n *  @param {Makrene.Circle} graph - The graph instance.\n *  @param {number} index - The index for the level and position data.\n *  @return {object} - object with properties 'level' and 'position'\n */\nfunction getPositionLevel(graph, index){\n\n  if (index == 0) {\n    return {\n      level: 0,\n      position: 0\n    };\n  } else {\n    var position = Math.floor(index % graph.numVertexOnLevel);\n    var level = Math.floor(index / graph.numVertexOnLevel);\n    return {\n      level: (position === 0) ? level : level + 1,\n      position: ((position === 0) ? (graph.numVertexOnLevel - 1 ) : (position - 1))\n    };\n  }\n}\n\n/**\n *  Links a certain vertex with two vertices one level below. This method\n *  will also create the edges and faces.\n * \n *  Syntax:\n *  linkWithLevelBelowVertexes(graph, levelIndex, vertexLevelIndex)\n * \n *  @private\n *  @param {Makrene.Circle} graph - The graph instance.\n *  @param {number} levelIndex - The level of the vertex.\n *  @param {number} vertexLevelIndex - The position of the vertex on that level.\n *  @return {undefined}\n */\nfunction linkWithLevelBelowVertexes(graph, levelIndex, vertexLevelIndex){\n  var lastLevelVertexes = graph.vertices[levelIndex - 1];\n\n  if (lastLevelVertexes) {\n    var v = graph.vertices[levelIndex][vertexLevelIndex];\n    var index1 = (lastLevelVertexes.length - 1) < vertexLevelIndex     ? 0 : vertexLevelIndex;\n    var index2 = (lastLevelVertexes.length - 1) < vertexLevelIndex + 1 ? 0 : vertexLevelIndex + 1;\n\n    if (lastLevelVertexes[index1]) {\n      v.neighbors.push(lastLevelVertexes[index1]);\n      lastLevelVertexes[index1].neighbors.push(v);\n    \n      createEdge(graph, v, lastLevelVertexes[index1]); \n    }\n\n    if (index1 != index2 && lastLevelVertexes[index2]) {\n      v.neighbors.push(lastLevelVertexes[index2]);\n      lastLevelVertexes[index2].neighbors.push(v);\n      \n      createEdge(graph, v, lastLevelVertexes[index2]);\n      if (lastLevelVertexes[index1]){\n        createFace(graph, v, lastLevelVertexes[index1], lastLevelVertexes[index2]);\n      }\n    }\n  }\n}\n\n/**\n *  Links a certain vertex with two vertices one level above. This method\n *  will also create the edges and faces.\n * \n *  Syntax:\n *  linkWithLevelAboveVertexes(graph, levelIndex, vertexLevelIndex)\n * \n *  @private\n *  @param {Makrene.Circle} graph - The graph instance.\n *  @param {number} levelIndex - The level of the vertex.\n *  @param {number} vertexLevelIndex - The position of the vertex on that level.\n *  @return {undefined}\n */\nfunction linkWithLevelAboveVertexes(graph, levelIndex, vertexLevelIndex){\n  var aboveLevelVertexes = graph.vertices[levelIndex + 1];\n\n  if (aboveLevelVertexes){\n    var v = graph.vertices[levelIndex][vertexLevelIndex];\n    var index1 = vertexLevelIndex\n    var index2 = vertexLevelIndex - 1 < 0 ? graph.numVertexOnLevel - 1 : vertexLevelIndex - 1;\n\n    if (aboveLevelVertexes[index1]){\n       v.neighbors.push(aboveLevelVertexes[index1]);\n       aboveLevelVertexes[index1].neighbors.push(v);\n    \n      createEdge(graph, v, aboveLevelVertexes[index1]); \n    }\n\n    if (index1 != index2 && aboveLevelVertexes[index2]){\n      v.neighbors.push(aboveLevelVertexes[index2]);\n      aboveLevelVertexes[index2].neighbors.push(v);\n      \n      createEdge(graph, v, aboveLevelVertexes[index2]);\n\n      if (aboveLevelVertexes[index1]){\n        createFace(graph, v, aboveLevelVertexes[index1], aboveLevelVertexes[index2]);\n      }\n    }\n  }\n}\n\n/**\n *  Links a center vertex with all vertices on level one. This method\n *  will also create the edges and faces.\n * \n *  Syntax:\n *  linkCenterWithLevelAboveVertexes(graph)\n * \n *  @private\n *  @param {Makrene.Circle} graph - The graph instance.\n *  @return {undefined}\n */\nfunction linkCenterWithLevelAboveVertexes(graph){\n\n  graph.vertices[1].forEach(function(aboveLevelVertex){\n    if (aboveLevelVertex){\n\n      graph.first.neighbors.push(aboveLevelVertex);\n      aboveLevelVertex.neighbors.push(graph.first);\n      createEdge(graph, graph.first, aboveLevelVertex);\n    }\n  });\n\n  graph.vertices[1].forEach(function(aboveLevelVertex, index){\n    if (aboveLevelVertex){\n      var indexNext = index - 1 < 0 ? graph.numVertexOnLevel - 1 : index - 1;\n\n      if (index != indexNext && graph.vertices[1][indexNext]){\n        createFace(graph, graph.first, aboveLevelVertex, graph.vertices[1][indexNext]);\n      }\n    }\n  });\n}\n\n/**\n *  Links a certain vertex with given neighbor vertex. This method\n *  will also create the edges and faces.\n * \n *  Syntax:\n *  linkWithNeighborVertex(graph, vertex, neighbor)\n * \n *  @private\n *  @param {Makrene.Circle} graph - The graph instance.\n *  @param {Makrene.Vertex} vertex - The vertex to be linked. \n *  @param {Makrene.Vertex} neighbor - The neighbor vertex to link with. \n *  @return {undefined}\n */\nfunction linkWithNeighborVertex(graph, vertex, neighbor){\n  if (neighbor) {\n    vertex.neighbors.push(neighbor);\n    neighbor.neighbors.push(vertex);\n    createEdge(graph, vertex, neighbor);\n\n    vertex.neighbors\n          .filter(function(n){ \n            if (neighbor != n){\n              return neighbor.neighbors.includes(n); \n            }\n          }).forEach(function(n){\n            createFace(graph, vertex, neighbor, n);\n          })\n  }\n}\n\n/**\n *  Creates new edge for given graph from vertex one to vertex two.\n * \n *  Syntax:\n *  createEdge(graph, v1, v2)\n * \n *  @private\n *  @param {Makrene.Circle} graph  - The graph instance.\n *  @param {Makrene.Vertex} v1 - Vertex one of new edge.\n *  @param {Makrene.Vertex} v2 - Vertex two of new edge.\n *  @return {undefined}\n */\nfunction createEdge(graph, v1, v2){\n  var edge = Makrene.Edge();\n  edge.vertices.push(v1);\n  edge.vertices.push(v2);\n  edge.id = graph.edges.length;\n  graph.edges.push(edge);\n\n  v2.edges.push(edge);\n  v1.edges.push(edge);\n\n  linkEdgeWithVertexEdges(edge, v1);\n  linkEdgeWithVertexEdges(edge, v2);\n}\n\n/**\n *  Links given edge with all edges of a vertex.\n * \n *  Syntax:\n *  linkEdgeWithVertexEdges(edge, vertex)\n * \n *  @private\n *  @param {Makrene.Edge} edge - The edge to be linked. \n *  @param {Makrene.Vertex} vertex - The vertex with edge neighbors.\n *  @return {undefined}\n */\nfunction linkEdgeWithVertexEdges(edge, vertex){\n  vertex.edges.forEach(function(e){\n    if (edge != e && !edge.neighbors.includes(e)){\n      edge.neighbors.push(e);\n      e.neighbors.push(edge);\n    }\n  });\n}\n\n/**\n *  Creates a new face for given graph from vertex one over \n *  vertex two to vertex three.\n * \n *  Syntax:\n *  createFace(graph, v1, v2, v3)\n * \n *  @private\n *  @param {Makrene.Circle} graph  - The graph instance.\n *  @param {Makrene.Vertex} v1 - Vertex one of new face.\n *  @param {Makrene.Vertex} v2 - Vertex two of new face.\n *  @param {Makrene.Vertex} v3 - Vertex three of new face.\n *  @return {undefined}\n */\nfunction createFace(graph, v1, v2, v3){\n  var f = Makrene.Face();\n\n  f.vertices.push(v1);\n  f.vertices.push(v2);\n  f.vertices.push(v3);\n\n  v1.faces.push(f);\n  v2.faces.push(f);\n  v3.faces.push(f);\n\n  f.id = graph.faces.length;\n  f.data = {\n    level: Math.min(\n      v1.data.level,\n      v2.data.level,\n      v3.data.level)\n  };\n  \n  graph.faces.push(f);\n\n  linkFaceWithVertexFaces(f, v1);\n  linkFaceWithVertexFaces(f, v2);\n  linkFaceWithVertexFaces(f, v3);\n\n  // Link edge with face\n  var edges = [];\n  edges.push(v1.edges.filter(function(e){ return e.vertices.includes(v2); })[0]);\n  edges.push(v2.edges.filter(function(e){ return e.vertices.includes(v3); })[0]);\n  edges.push(v3.edges.filter(function(e){ return e.vertices.includes(v1); })[0]);\n  \n  edges.forEach(function(e){\n    e.faces.push(f);\n    f.edges.push(e);\n  });\n}\n\n/**\n *  Links given face with all faces of a vertex.\n * \n *  Syntax:\n *  linkFaceWithVertexFaces(edge, vertex)\n * \n *  @private\n *  @param {Makrene.Edge} face - The face to be linked. \n *  @param {Makrene.Vertex} vertex - The vertex with faces neighbors.\n *  @return {undefined}\n */\nfunction linkFaceWithVertexFaces(face, vertex){\n  vertex.faces.forEach(function(f){\n    if (face != f && !face.neighbors.includes(f)){\n      face.neighbors.push(f);\n      f.neighbors.push(face);\n    }\n  });\n}\n\n/**\n *  Calculates the degree of vertex on the circle level.\n * \n *  Syntax:\n *  calculateVertexDegree(graph, level, position)\n * \n *  @private\n *  @param {Makrene.Circle} graph  - The graph instance.\n *  @param {number} level - The level of the circle.\n *  @param {number} position - The position on the level.\n *  @return {number} - the degree of the vertex.\n */\nfunction calculateVertexDegree(graph, level, position) {\n  var levelDegreeOffset =  (360/graph.numVertexOnLevel)/2;\n  return levelDegreeOffset + (levelDegreeOffset * level) + ((360/graph.numVertexOnLevel) * position);\n}\n\n}());\n\n},{\"../base/makrene.base\":1}],4:[function(_dereq_,module,exports){\n(function() {\n\n/*global require, module */\n\nvar Makrene = _dereq_('../base/makrene.base');\n\n/**\n *  Structure for directions on the grid.\n *  \n *  @private\n *  @type {object}   \n */\nvar Dir = {\n  Top     : 0,\n  Right   : 1,\n  Bottom  : 2,\n  Left    : 3,\n\n  TopLeft     : 0,\n  TopRight    : 1,\n  BottomRight : 2,\n  BottomLeft  : 3\n};\n\n/**\n *  Multi linked grid mesh.\n *\n *  0,0 --- 0,1 --- 0,2\n *   |       |       |\n *   |       |       |\n *  1,0 --- 1,1 --- 1,2\n *   |       |       |\n *   |       |       |\n *  2,0 --- 2,1 --- 2,2\n * \n *  Current it is a very simple data structure. It is static, which means \n *  it will create every vertex when it is created.\n * \n *  Syntax:\n *  \n *  var grid = Makrene.Grid();\n *\n *  @public\n *  @implements {Makrene.Grid}\n *  @param {object} config - the Settings\n *  @param {number} config.rows - @see graph.rows\n *  @param {number} config.cols - @see graph.cols\n *  @returns {Makrene.Grid} - The grid instance.\n */\nmodule.exports = function Makrene_Grid(config){\n\n  /***\n   *       _____             __ _       \n   *      / ____|           / _(_)      \n   *     | |     ___  _ __ | |_ _  __ _ \n   *     | |    / _ \\| '_ \\|  _| |/ _` |\n   *     | |___| (_) | | | | | | | (_| |\n   *      \\_____\\___/|_| |_|_| |_|\\__, |\n   *                               __/ |\n   *                              |___/ \n   */\n\n  config = Object.assign({\n\n    /**\n     *  default setting for rows.\n     *  @see graph.rows\n     */\n     rows: 0,\n\n    /**\n     *  default setting for columns.\n     *  @see graph.cols\n     */\n    cols: 0\n \n  }, config);\n\n  /***\n   *      _____                           _   _           \n   *     |  __ \\                         | | (_)          \n   *     | |__) | __ ___  _ __   ___ _ __| |_ _  ___  ___ \n   *     |  ___/ '__/ _ \\| '_ \\ / _ \\ '__| __| |/ _ \\/ __|\n   *     | |   | | | (_) | |_) |  __/ |  | |_| |  __/\\__ \\\n   *     |_|   |_|  \\___/| .__/ \\___|_|   \\__|_|\\___||___/\n   *                     | |                              \n   *                     |_|                              \n   */\n\n\n  var graph = Object.create(Makrene_Grid.prototype, {\n\n    /**\n     *  Gets the number of rows on the grid.\n     *\n     *  @public\n     *  @default 0\n     *  @type {number}\n     */\n    rows: {\n      value: config.rows\n    },\n\n    /**\n     *  Gets the number of columns on the grid.\n     *\n     *  @public\n     *  @default 0\n     *  @type {number}\n     */\n    cols: {\n      value: config.cols\n    }\n\n  });\n\n  /***\n   *      __  __      _   _               _     \n   *     |  \\/  |    | | | |             | |    \n   *     | \\  / | ___| |_| |__   ___   __| |___ \n   *     | |\\/| |/ _ \\ __| '_ \\ / _ \\ / _` / __|\n   *     | |  | |  __/ |_| | | | (_) | (_| \\__ \\\n   *     |_|  |_|\\___|\\__|_| |_|\\___/ \\__,_|___/\n   *                                                                                     \n   */\n  graph = Object.assign(Makrene.Graph({}, graph), {\n\n    /**\n     *  The forEach() method executes a provided function once for each grid vertex.\n     *\n     *  Syntax:\n     *  grid.forEach(function callback(currentVertex[, row[, column]]) {\n     *  }[, thisArg]);\n     *\n     *  @public\n     *  @param {function} callback - Function to execute for each element, taking three arguments:\n     *                          currentVertex  Optional\n     *                              The current element being processed in the grid.\n     *                          row   Optional\n     *                              The row of the currentVertex.\n     *                          column   Optional\n     *                              The column of the currentVertex.\n     *\n     *  @return {undefined}\n     */\n    forEach: function(callback){\n      for (var r = graph.rows - 1; r >= 0; r--) {\n        for (var c = graph.cols - 1; c >= 0; c--) {\n          callback(graph.vertices[r][c], r, c);\n        }\n      }\n    }\n  })\n\n  init(graph);\n\n  return graph;\n};\n\n/***\n *      _____      _            _            \n *     |  __ \\    (_)          | |           \n *     | |__) | __ ___   ____ _| |_ ___  ___ \n *     |  ___/ '__| \\ \\ / / _` | __/ _ \\/ __|\n *     | |   | |  | |\\ V / (_| | ||  __/\\__ \\\n *     |_|   |_|  |_| \\_/ \\__,_|\\__\\___||___/\n *                                                                                    \n */\n\n/**\n *  Initialize a empty grid with every vertex, edge and face for\n *  given rows and columns.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction init(graph){\n  createVertexes(graph);\n  linkVertexes(graph);\n\n  createEdges(graph);\n  linkEdges(graph);\n\n  createFaces(graph);\n  linkFaces(graph);\n}\n\n/**\n *  Creates every vertex for the grid.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction createVertexes(graph){\n  for (var r = graph.rows - 1; r >= 0; r--) {\n    graph.vertices[r] = [];\n    for (var c = graph.cols - 1; c >= 0; c--) {\n      var v = Makrene.Vertex();\n\n      v.data.row = r;\n      v.data.col = c;\n\n      graph.vertices[r][c] = v;\n    }\n  }\n}\n\n/**\n *  Links every vertex for the grid.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction linkVertexes(graph){\n  graph.forEach(function(vertex, row, col){\n\n    if (col > 0){\n      vertex.neighbors[Dir.Left] = graph.vertices[row][col - 1];\n    }\n\n    if (col < graph.cols -1) {\n      vertex.neighbors[Dir.Right] = graph.vertices[row][col + 1];\n    }\n\n    if (row > 0){\n      vertex.neighbors[Dir.Top] = graph.vertices[row - 1][col];\n    }\n\n    if (row < graph.rows -1){\n      vertex.neighbors[Dir.Bottom] = graph.vertices[row + 1][col];\n    }\n\n  });\n}\n\n/**\n *  Creates every edge for the grid.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction createEdges(graph){\n  graph.forEach(function(vertex){\n    if (vertex.neighbors[Dir.Left]) {\n      createEdge(graph, vertex, vertex.neighbors[Dir.Left]);\n    }\n\n    if (vertex.neighbors[Dir.Top]) {\n      createEdge(graph, vertex, vertex.neighbors[Dir.Top]);\n    }\n  });\n}\n\n/**\n *  Creates new edge for given graph from vertex one to vertex two.\n * \n *  Syntax:\n *  createEdge(graph, v1, v2)\n * \n *  @private\n *  @param {Makrene.Grid} graph  - The graph instance.\n *  @param {Makrene.Vertex} v1 - Vertex one of new edge.\n *  @param {Makrene.Vertex} v2 - Vertex two of new edge.\n *  @return {undefined}\n */\nfunction createEdge(graph, v1, v2){\n  var edge = Makrene.Edge();\n  edge.vertices.push(v1);\n  edge.vertices.push(v2);\n\n  graph.edges.push(edge);\n\n  v2.edges.push(edge);\n  v1.edges.push(edge);\n}\n\n/**\n *  Links every edge for the grid.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction linkEdges(graph){\n  graph.edges.forEach(function(edge) {\n    edge.vertices.forEach(function(vertex) {\n      vertex.edges.forEach(function(neighbor){\n        if (edge != neighbor) {\n          edge.neighbors.push(neighbor);\n        }\n      });\n    });\n  });\n}\n\n/**\n *  Creates every face for the grid.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction createFaces(graph){\n  graph.forEach(function(vertex){\n    if (vertex.neighbors[Dir.Left]\n     && vertex.neighbors[Dir.Top]) {\n\n      createFace(\n        graph,\n        vertex,\n        vertex.neighbors[Dir.Left],\n        vertex.neighbors[Dir.Top],\n        vertex.neighbors[Dir.Top]\n              .neighbors[Dir.Left]);\n    }\n  });\n}\n\n/**\n *  Creates a new face for given graph from vertex one over \n *  vertex two over vertex three to vertex four.\n * \n *  Syntax:\n *  createFace(graph, v1, v2, v3, v4)\n * \n *  @private\n *  @param {Makrene.Grid} graph  - The graph instance.\n *  @param {Makrene.Vertex} v1 - Vertex one of new face.\n *  @param {Makrene.Vertex} v2 - Vertex two of new face.\n *  @param {Makrene.Vertex} v3 - Vertex three of new face.\n *  @param {Makrene.Vertex} v4 - Vertex four of new face.\n *  @return {undefined}\n */\nfunction createFace(graph, v1, v2, v3, v4){\n  var edges = [];\n\n  v1.edges.forEach(function(edge){\n    if (edge.vertices.includes(v2) || edge.vertices.includes(v3)){\n      edges.push(edge);\n    }\n  });\n\n  v4.edges.forEach(function(edge){\n    if (edge.vertices.includes(v2) || edge.vertices.includes(v3)){\n      edges.push(edge);\n    }\n  });\n\n  var face = Makrene.Face();\n\n  face.vertices[Dir.TopRight]    = v3;\n  face.vertices[Dir.TopLeft]     = v4;\n  face.vertices[Dir.BottomLeft]  = v2;\n  face.vertices[Dir.BottomRight] = v1;\n\n  graph.faces.push(face);\n\n  v1.faces.push(face)\n  v2.faces.push(face)\n  v3.faces.push(face)\n  v4.faces.push(face)\n\n  edges.forEach(function(edge){\n    face.edges.push(edge);\n    edge.faces.push(face);\n  });\n}\n\n/**\n *  Links every face for the grid.\n * \n *  @private\n *  @param {Makrene.Grid} graph - The graph instance.\n *  @return {undefined}\n */\nfunction linkFaces(graph){\n  graph.faces.forEach(function(face) {\n    face.vertices.forEach(function(vertex) {\n      vertex.faces.forEach(function(neighbor){\n        if (face != neighbor) {\n          face.neighbors.push(neighbor);\n        }\n      });\n    });\n  });\n}\n\n}());\n\n},{\"../base/makrene.base\":1}],5:[function(_dereq_,module,exports){\n(function() {\n\n/*global module */\n\n/**\n *  KI for Makrene Circle.\n * \n *  @param {Makrene.Circle} circle - The circle instance.\n */\nmodule.exports = function(circle){\n\n  /**\n   *  KI-Circle Instance.\n   * \n   *  @type {Makrene.Ki.Circle}\n   */\n  var ki = {\n\n    /**\n     *  Circle instance.\n     * \n     *  @type {Makrene.Circle}\n     */\n    circle: circle,\n\n    /**\n     *  Initialize Circle KI.\n     * \n     *  @public\n     *  @return {undefined}\n     */\n    init: function(){\n      ki.circle.forEach(function(v){\n        v.data.degree = v.data.degree % 360;\n        v.data.OriginalLevel = v.data.degree;\n        v.data.OriginalLevel= v.data.level;\n      });\n    },\n\n    /**\n     *  Execute one logic step for the KI.\n     * \n     *  @public\n     *  @return {undefined}\n     */\n    step: function(){\n      ki.circle.forEach(function(v){\n\n        // goto original angle\n        var a1 = v.data.OriginalLevel;\n        var a2 = v.data.degree ;\n        var angle = 180 - Math.abs(Math.abs(a1 - a2) - 180);\n\n        if (Math.abs(angle) >= 1) {\n          var angle2 = 180 - Math.abs(Math.abs((a1+1) - a2) - 180);\n          v.data.degree += angle2 > angle ? 1 : -1;\n          v.data.degree = v.data.degree % 360;\n        }\n\n        // goto original level\n        var l1 = v.data.OriginalLevel;\n        var l2 = v.data.level;\n\n        if (Math.abs(l1 - l2) > 0.1) {\n          v.data.level += l1 > l2 ? +0.1 : -0.1;\n        }\n\n      });\n    }\n  };\n\n  return ki;\n};\n\n}());\n\n},{}],6:[function(_dereq_,module,exports){\n/*global module */\n\nvar Search = {\n\n  /**\n   *  \n   */\n  DepthFirstSearch: function(vertex, distance, fn){\n    if (!vertex.data.visited && distance>0) {\n      vertex.data.visited = true;\n      fn && fn(vertex);\n      vertex.neighbors.forEach(function(neighbor){\n        if (neighbor) {\n          Search.DepthFirstSearch(neighbor, distance - 1, fn);\n        }\n      });\n    }\n  },\n\n  /**\n   *\n   */\n  BreadthFirstSearch: function (vertices, distance, fn) {\n    if (distance > 0) {\n      var nextVertices = [];\n      vertices.forEach(function(vertex){\n        if (vertex) {\n          vertex.data.visited = true; // for the firsts\n          fn && fn(vertex);\n          for (var i = vertex.neighbors.length - 1; i >= 0; i--) {\n            if (!vertex.neighbors[i].data.visited) {\n              vertex.neighbors[i].data.visited = true;\n              nextVertices.push(vertex.neighbors[i]);\n            }\n          }\n        }\n      })\n      Search.BreadthFirstSearch(nextVertices, distance - 1, fn);\n    }\n  },\n  \n  /**\n   * \n   */\n  BreadthFirstSearchIterate: function (graph, vertices, fn, visited) {\n    visited = visited || [];\n\n    if (visited.length === 0) {\n      graph.forEach(function(vertex){\n        vertex.data.visited   = false;\n        vertex.data.lastVisit = Number.MAX_VALUE;\n      });\n    }\n\n    if (vertices.length != 0) {\n      var nextVertices = [];\n\n      vertices.forEach(function(vertex){\n        if (vertex) {\n\n          visited.push(vertex);\n\n          vertex.data.visited   = true; // for the firsts\n          vertex.data.lastVisit = Date.now();\n          fn && fn(vertex);\n\n          vertex.neighbors.forEach(function(neighbor){\n            if (neighbor && !neighbor.data.visited && !nextVertices.includes(neighbor)) {\n              neighbor.data.visited   = true;\n              nextVertices.push(neighbor);\n            }\n          })\n        }\n      });\n\n      return {\n        visited      : vertices,\n        visitedAll   : visited,\n        nextVertices : nextVertices,\n\n        next : function () {\n          return Search.BreadthFirstSearchIterate(graph, nextVertices, fn, visited);\n        }\n      };\n    }\n  }\n};\n\nmodule.exports = Search;\n\n},{}],7:[function(_dereq_,module,exports){\n/*global require, module */\n\nvar base = _dereq_('./makrene.visualizer');\n\nmodule.exports = function (context, circle, config) {\n\n  var offsetX = (config.width  - config.vertexWidth ) / 2;\n  var offsetY = (config.height - config.vertexHeight) / 2;\n\n  base(context,\n    circle,\n    config,\n    function(v) {\n      return offsetX + ((Math.cos(v.data.degree * 0.0174532925) * (v.data.level * config.levelOffset)) + config.vertexWidth  / 2);\n    },\n    function(v) {\n      return offsetY + ((Math.sin(v.data.degree * 0.0174532925) * (v.data.level * config.levelOffset)) + config.vertexHeight / 2);\n    });\n};\n\n},{\"./makrene.visualizer\":10}],8:[function(_dereq_,module,exports){\n/*global require, module */\n\nvar base = _dereq_('./makrene.visualizer');\n\n/**\n *  This visualizer draws a Makrene.Circle, from the center of the canvas, to the edges\n *  of the canvas. The outer ring of the circle will be drag out to the edges of the canvas \n *  rectangle. This gives a special effect of filled space. By default each ring, will be\n *  spaced equally to the outer edge. \n *\n *   -------B-------\n *   |     / \\     | \n *   A----5---6----C\n *   | \\ / \\ / \\ / |\n *   |  4---1---7  |\n *   | / \\ / \\ / \\ |  \n *   9----3---2----D\n *   |     \\ /     |\n *   -------8-------\n *\n *  @public\n *  @param {RenderingContext} context   - The canvas 2d rendering context.\n *  @param {Makrene.Circle} circle      - the circle structure\n *  @param {object} config              - The settings\n *  @param {number} config.width        - The width of the screen\n *  @param {number} config.height       - The height of the screen\n *  @param {number} config.levelOffset  - The space between each level\n *  @param {number} config.vertexWidth  - The width of each vertex box\n *  @param {number} config.vertexHeight - The height of each vertex box\n *  @param {string} config.lineColor    - The color of the lines\n *  @param {string} config.vertexColor  - The color of each vertex box\n *  @param {number} config.lineWidth    - The width of each line\n *  @return {undefined}\n */\nmodule.exports = function (context, circle, config) {\n\n  config.padding = config.padding || 0;\n\n  config.width -= config.padding * 2;\n  config.height -= config.padding * 2;\n\n  var offsetX = (config.width  - config.vertexWidth ) / 2;\n  var offsetY = (config.height - config.vertexHeight) / 2;\n\n  config.levelOffset = config.levelOffset || (config.width/2)/circle.numCircleLevels;\n\n  base(context,\n    circle,\n    config,\n    function(v) {\n      return (config.padding + ((v.data.level == circle.numCircleLevels) \n      ? edgeOfView(config, v.data.degree).x\n      : offsetX + ((Math.cos(v.data.degree * 0.0174532925) * (v.data.level * config.levelOffset)) + config.vertexWidth  / 2)));\n    },\n    function(v) {\n      return (config.padding + ((v.data.level == circle.numCircleLevels)\n      ? edgeOfView(config, v.data.degree-180).y\n      : offsetY + ((Math.sin(v.data.degree * 0.0174532925) * (v.data.level * config.levelOffset)) + config.vertexHeight / 2)));\n    });\n};\n\n/**\n *  The edgeOfView() method finds the point on the rectangle by degree from the middle point.\n *\n *  -------------X------\n *  |           /      |                Given an 2d rectangle with width and height, find the \n *  |          / 45°   |                x and y position, on the border of the rectangle, by an given\n *  |         /________| height         angle from the center of the rectangle.\n *  |                  |\n *  |                  |\n *  --------------------\n *          width\n *\n *  @link https://stackoverflow.com/questions/4061576/finding-points-on-a-rectangle-at-a-given-angle/31886696\n *  @remarks Solution was found as always on stackoverflow :P\n *  \n *  Syntax:\n *  var point = edgeOfView({ height: 100, width: 40 }, 45);\n *  console.log(point.x, point.y);  \n *\n *  @private\n *  @param {object} rect        - the rectangle box, on which to find the point by degree\n *  @param {number} rect.height - the height of the rectangle\n *  @param {number} rect.width  - the width of the rectangle\n *  @param {number} deg         - the degree from the center to find the point\n *  @return {object}            - The point with x, y coordinates.\n */\nfunction edgeOfView (rect, deg) {\n\n  var twoPI = Math.PI*2;\n  var theta = deg * Math.PI / 180;\n  \n  while (theta < -Math.PI) {\n    theta += twoPI;\n  }\n  \n  while (theta > Math.PI) {\n    theta -= twoPI;\n  }\n  \n  var rectAtan = Math.atan2(rect.height, rect.width);\n  var tanTheta = Math.tan(theta);\n  var region;\n  \n  if ((theta > -rectAtan) && (theta <= rectAtan)) {\n      region = 1;\n  } else if ((theta > rectAtan) && (theta <= (Math.PI - rectAtan))) {\n      region = 2;\n  } else if ((theta > (Math.PI - rectAtan)) || (theta <= -(Math.PI - rectAtan))) {\n      region = 3;\n  } else {\n      region = 4;\n  }\n  \n  var edgePoint = {x: rect.width/2, y: rect.height/2};\n  var xFactor = 1;\n  var yFactor = 1;\n  \n  switch (region) {\n    case 1: yFactor = -1; break;\n    case 2: yFactor = -1; break;\n    case 3: xFactor = -1; break;\n    case 4: xFactor = -1; break;\n  }\n  \n  if ((region === 1) || (region === 3)) {\n    edgePoint.x += xFactor * (rect.width / 2.);\n    edgePoint.y += yFactor * (rect.width / 2.) * tanTheta;\n  } else {\n    edgePoint.x += xFactor * (rect.height / (2. * tanTheta));\n    edgePoint.y += yFactor * (rect.height /  2.);\n  }\n  \n  return edgePoint;\n}\n\n},{\"./makrene.visualizer\":10}],9:[function(_dereq_,module,exports){\n/*global require, module */\n\nvar base = _dereq_('./makrene.visualizer');\n\nmodule.exports = function (context, circle, config) {\n\n  base(context,\n    circle,\n    config,\n    function(v) {\n      return config.offset + (((config.vertexWidth + config.margin) * v.data.col) + config.vertexWidth/2);\n    },\n    function(v) {\n      return config.offset + (((config.vertexHeight + config.margin ) * v.data.row) + config.vertexHeight/2);\n    });\n};\n\n},{\"./makrene.visualizer\":10}],10:[function(_dereq_,module,exports){\n/*global module */\n\nmodule.exports = function(context, graph, config, getPosX, getPosY){\n\n  config = Object.assign({\n\n   /**\n    *  The width of the screen\n    *  @type {number}\n    */\n    width: 100,\n\n   /**\n    *  The height of the screen\n    *  @type {number}\n    */\n    height: 100,\n    \n   /**\n    *  The space between each level\n    *  @type {number}\n    */\n    levelOffset: 10,\n    \n   /**\n    *  The width of each vertex box\n    *  @type {number}\n    */\n    vertexWidth: 100,\n    \n   /**\n    *  The height of each vertex box\n    *  @type {number}\n    */\n    vertexHeight: 100,\n    \n   /**\n    *  The color of the lines\n    *  @type {string}\n    */\n    lineColor: \"red\",\n    \n   /**\n    *  The color of each vertex box\n    *  @type {string}\n    */\n    vertexColor: \"white\",\n        \n   /**\n    *  The color of each vertex box\n    *  @type {string}\n    */\n    faceColor: \"black\",\n\n   /**\n    *  The width of each line\n    *  @type {number}\n    */\n    lineWidth: 100,\n\n    /**\n     *  Draw faces\n     *  @type {bool}\n     */\n     drawFaces: true,\n\n    /**\n     *  Draw edges\n     *  @type {bool}\n     */\n     drawEdges: true,\n\n    /**\n     *  Draw vertices\n     *  @type {bool}\n     */\n     drawVertices: true,\n\n    /**\n     *  Draw faces\n     *  @type {bool}\n     */\n     drawFacesDebugText: false,\n\n    /**\n     *  Draw faces\n     *  @type {bool}\n     */\n     drawEdgesDebugText: false,\n\n    /**\n     *  Draw faces\n     *  @type {bool}\n     */\n     drawVertexDebugText: false,\n     \n     /**\n      *  Draw Vertex Text Callback.\n      *  @type {function}\n      *  @param {Makrene.Vertex} v - the vertex\n      *  @return {string} - the text\n      */\n     getVertexDebugText: function (v) {\n      return 'i' + v.id +\n             'n' + v.neighbors.length + \n             'e' + v.edges.length + \n             'f' + v.faces.length;\n     }\n\n  }, config);\n\n  getPosX = getPosX || function (v) {\n    if (v.data.x)\n      return v.data.x;\n    v.data.x = Math.random() * config.width;\n    return v.data.x;\n  }\n\n  getPosY = getPosY || function (v) {\n    if (v.data.y)\n      return v.data.y;\n    v.data.y = Math.random() * config.height;\n    return v.data.y;\n  }\n\n  /**\n   *   Checks if an object is a function. \n   *   \n   *   From underscore.js\n   * \n   *   @param {any} obj - object to check.\n   *   @return {boolean} - true if object is function\n   */\n  var isCallable = function (obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  }\n\n  if (config.drawFaces) {\n    // draw Faces\n    graph.faces.forEach(function(face){\n      context.beginPath();\n      context.fillStyle = isCallable(config.faceColor) ? config.faceColor(face) : config.faceColor;\n      var vertex = face.vertices[0];\n      context.moveTo(getPosX(vertex), getPosY(vertex));\n      face.vertices.forEach(function(vertex){\n        context.lineTo(getPosX(vertex), getPosY(vertex));\n      })\n      context.fill();\n    })\n  }\n\n  if (config.drawEdges) {\n    // draw Edges\n    graph.edges.forEach(function(edge){\n      context.beginPath();\n      context.lineWidth = config.lineWidth;\n      context.strokeStyle = isCallable(config.lineColor) ? config.lineColor(edge) : config.lineColor;\n      var v1 = edge.vertices[0];\n      var v2 = edge.vertices[1];\n      context.moveTo(getPosX(v1), getPosY(v1));\n      context.lineTo(getPosX(v2), getPosY(v2));\n      context.stroke();\n    });\n  }\n\n  if (config.drawVertices) {\n    // draw vertexes\n    graph.forEach(function(v){\n      if (v){\n        context.beginPath();\n        context.fillStyle = isCallable(config.vertexColor) ? config.vertexColor(v) : config.vertexColor;\n        context.fillRect(\n          getPosX(v) - config.vertexWidth/2,\n          getPosY(v) - config.vertexHeight/2,\n          config.vertexWidth,\n          config.vertexHeight);     \n      }\n    });\n  }\n\n  if (config.drawVertexDebugText) {\n    // Draw text\n    graph.forEach(function(v){\n      if (v){\n        drawText(\n          context, \n          config.getVertexDebugText(v),\n          getPosX(v),\n          getPosY(v),\n          'red');\n      }\n    });\n  }\n\n  if (config.drawEdgesDebugText) {\n    graph.edges.forEach(function(edge){\n      var v1 = edge.vertices[0];\n      var v2 = edge.vertices[1];\n      drawText(\n        context,\n        'i' + edge.id +\n        'n' + edge.neighbors.length + \n        'v' + edge.vertices.length + \n        'f' + edge.faces.length,\n        getPosX(v1) + (getPosX(v2)- getPosX(v1))/2,\n        getPosY(v1) + (getPosY(v2) - getPosY(v1))/2,\n        'blue');\n    });\n  }\n\n  if (config.drawFacesDebugText) {\n    graph.faces.forEach(function(face){\n      var centerX = (getPosX(face.vertices[0]) + getPosX(face.vertices[1]) + getPosX(face.vertices[2])) / 3;\n      var centerY = (getPosY(face.vertices[0]) + getPosY(face.vertices[1]) + getPosY(face.vertices[2])) / 3;\n      \n      drawText(\n        context,\n        'i' + face.id +\n        'n' + face.neighbors.length + \n        'v' + face.vertices.length + \n        'e' + face.edges.length,\n        centerX,\n        centerY,\n        'black')\n    });\n  }\n};\n\nfunction drawText(context, content, x, y, color){\n  var lineHeight=context.measureText('M').width;\n  var width = context.measureText(content).width;\n  var padding = 2;\n  context.fillStyle = 'white';\n  context.fillRect(\n    (x - (width/2)) - padding,  \n    (y - (lineHeight/2)) - padding, \n    width + (padding *2), \n    lineHeight + (padding*2));\n\n  context.strokeStyle = context.fillStyle = color;\n  context.fillText(content, x - (width/2), y + (lineHeight/2));\n}\n},{}]},{},[2])\n(2)\n});"]}